//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""PlayerOverworld"",
            ""id"": ""aa1fa688-aac2-4499-ab02-8554ce60edcd"",
            ""actions"": [
                {
                    ""name"": ""CameraRotation"",
                    ""type"": ""Value"",
                    ""id"": ""dff37f5a-da88-4acd-b38b-7b7960923134"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Value"",
                    ""id"": ""198356de-a62e-4ee9-bb41-41c8a049cf70"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SingleClickToMove"",
                    ""type"": ""Button"",
                    ""id"": ""69aed299-33fc-47fa-a270-a1d982e95850"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""7feca25b-ab3d-4f2e-a9f7-184fbe1a97ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraEnableRotation"",
                    ""type"": ""Button"",
                    ""id"": ""5ece4653-4a4b-4502-b070-11817bae5dcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e314d9e4-7fbf-4252-b066-058774cb56cb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc7e9b98-53cc-490e-81e5-eb481544c19e"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d41245c5-bfef-459d-9851-67b1906ba898"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleClickToMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d028fb2-aadb-4378-a3d3-4e703d154250"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6749a4c-36e6-44cf-b35b-8ffd6a341987"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraEnableRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerOverworld
        m_PlayerOverworld = asset.FindActionMap("PlayerOverworld", throwIfNotFound: true);
        m_PlayerOverworld_CameraRotation = m_PlayerOverworld.FindAction("CameraRotation", throwIfNotFound: true);
        m_PlayerOverworld_CameraZoom = m_PlayerOverworld.FindAction("CameraZoom", throwIfNotFound: true);
        m_PlayerOverworld_SingleClickToMove = m_PlayerOverworld.FindAction("SingleClickToMove", throwIfNotFound: true);
        m_PlayerOverworld_MousePosition = m_PlayerOverworld.FindAction("MousePosition", throwIfNotFound: true);
        m_PlayerOverworld_CameraEnableRotation = m_PlayerOverworld.FindAction("CameraEnableRotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOverworld
    private readonly InputActionMap m_PlayerOverworld;
    private List<IPlayerOverworldActions> m_PlayerOverworldActionsCallbackInterfaces = new List<IPlayerOverworldActions>();
    private readonly InputAction m_PlayerOverworld_CameraRotation;
    private readonly InputAction m_PlayerOverworld_CameraZoom;
    private readonly InputAction m_PlayerOverworld_SingleClickToMove;
    private readonly InputAction m_PlayerOverworld_MousePosition;
    private readonly InputAction m_PlayerOverworld_CameraEnableRotation;
    public struct PlayerOverworldActions
    {
        private @CustomInput m_Wrapper;
        public PlayerOverworldActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraRotation => m_Wrapper.m_PlayerOverworld_CameraRotation;
        public InputAction @CameraZoom => m_Wrapper.m_PlayerOverworld_CameraZoom;
        public InputAction @SingleClickToMove => m_Wrapper.m_PlayerOverworld_SingleClickToMove;
        public InputAction @MousePosition => m_Wrapper.m_PlayerOverworld_MousePosition;
        public InputAction @CameraEnableRotation => m_Wrapper.m_PlayerOverworld_CameraEnableRotation;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOverworld; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOverworldActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerOverworldActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces.Add(instance);
            @CameraRotation.started += instance.OnCameraRotation;
            @CameraRotation.performed += instance.OnCameraRotation;
            @CameraRotation.canceled += instance.OnCameraRotation;
            @CameraZoom.started += instance.OnCameraZoom;
            @CameraZoom.performed += instance.OnCameraZoom;
            @CameraZoom.canceled += instance.OnCameraZoom;
            @SingleClickToMove.started += instance.OnSingleClickToMove;
            @SingleClickToMove.performed += instance.OnSingleClickToMove;
            @SingleClickToMove.canceled += instance.OnSingleClickToMove;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @CameraEnableRotation.started += instance.OnCameraEnableRotation;
            @CameraEnableRotation.performed += instance.OnCameraEnableRotation;
            @CameraEnableRotation.canceled += instance.OnCameraEnableRotation;
        }

        private void UnregisterCallbacks(IPlayerOverworldActions instance)
        {
            @CameraRotation.started -= instance.OnCameraRotation;
            @CameraRotation.performed -= instance.OnCameraRotation;
            @CameraRotation.canceled -= instance.OnCameraRotation;
            @CameraZoom.started -= instance.OnCameraZoom;
            @CameraZoom.performed -= instance.OnCameraZoom;
            @CameraZoom.canceled -= instance.OnCameraZoom;
            @SingleClickToMove.started -= instance.OnSingleClickToMove;
            @SingleClickToMove.performed -= instance.OnSingleClickToMove;
            @SingleClickToMove.canceled -= instance.OnSingleClickToMove;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @CameraEnableRotation.started -= instance.OnCameraEnableRotation;
            @CameraEnableRotation.performed -= instance.OnCameraEnableRotation;
            @CameraEnableRotation.canceled -= instance.OnCameraEnableRotation;
        }

        public void RemoveCallbacks(IPlayerOverworldActions instance)
        {
            if (m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerOverworldActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerOverworldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerOverworldActions @PlayerOverworld => new PlayerOverworldActions(this);
    public interface IPlayerOverworldActions
    {
        void OnCameraRotation(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
        void OnSingleClickToMove(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnCameraEnableRotation(InputAction.CallbackContext context);
    }
}
